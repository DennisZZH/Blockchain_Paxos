// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_2eproto;
class Accept;
class AcceptDefaultTypeInternal;
extern AcceptDefaultTypeInternal _Accept_default_instance_;
class Accepted;
class AcceptedDefaultTypeInternal;
extern AcceptedDefaultTypeInternal _Accepted_default_instance_;
class Ballot;
class BallotDefaultTypeInternal;
extern BallotDefaultTypeInternal _Ballot_default_instance_;
class Decide;
class DecideDefaultTypeInternal;
extern DecideDefaultTypeInternal _Decide_default_instance_;
class MsgBlock;
class MsgBlockDefaultTypeInternal;
extern MsgBlockDefaultTypeInternal _MsgBlock_default_instance_;
class Prepare;
class PrepareDefaultTypeInternal;
extern PrepareDefaultTypeInternal _Prepare_default_instance_;
class Promise;
class PromiseDefaultTypeInternal;
extern PromiseDefaultTypeInternal _Promise_default_instance_;
class Restore;
class RestoreDefaultTypeInternal;
extern RestoreDefaultTypeInternal _Restore_default_instance_;
class Txn;
class TxnDefaultTypeInternal;
extern TxnDefaultTypeInternal _Txn_default_instance_;
class WireMessage;
class WireMessageDefaultTypeInternal;
extern WireMessageDefaultTypeInternal _WireMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Accept* Arena::CreateMaybeMessage<::Accept>(Arena*);
template<> ::Accepted* Arena::CreateMaybeMessage<::Accepted>(Arena*);
template<> ::Ballot* Arena::CreateMaybeMessage<::Ballot>(Arena*);
template<> ::Decide* Arena::CreateMaybeMessage<::Decide>(Arena*);
template<> ::MsgBlock* Arena::CreateMaybeMessage<::MsgBlock>(Arena*);
template<> ::Prepare* Arena::CreateMaybeMessage<::Prepare>(Arena*);
template<> ::Promise* Arena::CreateMaybeMessage<::Promise>(Arena*);
template<> ::Restore* Arena::CreateMaybeMessage<::Restore>(Arena*);
template<> ::Txn* Arena::CreateMaybeMessage<::Txn>(Arena*);
template<> ::WireMessage* Arena::CreateMaybeMessage<::WireMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Ballot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ballot) */ {
 public:
  Ballot();
  virtual ~Ballot();

  Ballot(const Ballot& from);
  Ballot(Ballot&& from) noexcept
    : Ballot() {
    *this = ::std::move(from);
  }

  inline Ballot& operator=(const Ballot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ballot& operator=(Ballot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ballot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ballot* internal_default_instance() {
    return reinterpret_cast<const Ballot*>(
               &_Ballot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ballot& a, Ballot& b) {
    a.Swap(&b);
  }
  inline void Swap(Ballot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ballot* New() const final {
    return CreateMaybeMessage<Ballot>(nullptr);
  }

  Ballot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ballot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ballot& from);
  void MergeFrom(const Ballot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ballot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ballot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqNFieldNumber = 1,
    kProcIdFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // required int32 seq_n = 1;
  bool has_seq_n() const;
  private:
  bool _internal_has_seq_n() const;
  public:
  void clear_seq_n();
  ::PROTOBUF_NAMESPACE_ID::int32 seq_n() const;
  void set_seq_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq_n() const;
  void _internal_set_seq_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 proc_id = 2;
  bool has_proc_id() const;
  private:
  bool _internal_has_proc_id() const;
  public:
  void clear_proc_id();
  ::PROTOBUF_NAMESPACE_ID::int32 proc_id() const;
  void set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proc_id() const;
  void _internal_set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 depth = 3;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ballot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_n_;
  ::PROTOBUF_NAMESPACE_ID::int32 proc_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class Txn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Txn) */ {
 public:
  Txn();
  virtual ~Txn();

  Txn(const Txn& from);
  Txn(Txn&& from) noexcept
    : Txn() {
    *this = ::std::move(from);
  }

  inline Txn& operator=(const Txn& from) {
    CopyFrom(from);
    return *this;
  }
  inline Txn& operator=(Txn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Txn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Txn* internal_default_instance() {
    return reinterpret_cast<const Txn*>(
               &_Txn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Txn& a, Txn& b) {
    a.Swap(&b);
  }
  inline void Swap(Txn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Txn* New() const final {
    return CreateMaybeMessage<Txn>(nullptr);
  }

  Txn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Txn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Txn& from);
  void MergeFrom(const Txn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Txn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Txn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // required int32 sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::int32 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender() const;
  void _internal_set_sender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 receiver = 2;
  bool has_receiver() const;
  private:
  bool _internal_has_receiver() const;
  public:
  void clear_receiver();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver() const;
  void set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver() const;
  void _internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Txn)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class MsgBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgBlock) */ {
 public:
  MsgBlock();
  virtual ~MsgBlock();

  MsgBlock(const MsgBlock& from);
  MsgBlock(MsgBlock&& from) noexcept
    : MsgBlock() {
    *this = ::std::move(from);
  }

  inline MsgBlock& operator=(const MsgBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBlock& operator=(MsgBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgBlock* internal_default_instance() {
    return reinterpret_cast<const MsgBlock*>(
               &_MsgBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgBlock& a, MsgBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBlock* New() const final {
    return CreateMaybeMessage<MsgBlock>(nullptr);
  }

  MsgBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBlock& from);
  void MergeFrom(const MsgBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranxsFieldNumber = 3,
    kNonceFieldNumber = 1,
    kHashFieldNumber = 2,
  };
  // repeated .Txn tranxs = 3;
  int tranxs_size() const;
  private:
  int _internal_tranxs_size() const;
  public:
  void clear_tranxs();
  ::Txn* mutable_tranxs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Txn >*
      mutable_tranxs();
  private:
  const ::Txn& _internal_tranxs(int index) const;
  ::Txn* _internal_add_tranxs();
  public:
  const ::Txn& tranxs(int index) const;
  ::Txn* add_tranxs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Txn >&
      tranxs() const;

  // required string nonce = 1;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // required string hash = 2;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:MsgBlock)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Txn > tranxs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class Restore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Restore) */ {
 public:
  Restore();
  virtual ~Restore();

  Restore(const Restore& from);
  Restore(Restore&& from) noexcept
    : Restore() {
    *this = ::std::move(from);
  }

  inline Restore& operator=(const Restore& from) {
    CopyFrom(from);
    return *this;
  }
  inline Restore& operator=(Restore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Restore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Restore* internal_default_instance() {
    return reinterpret_cast<const Restore*>(
               &_Restore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Restore& a, Restore& b) {
    a.Swap(&b);
  }
  inline void Swap(Restore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Restore* New() const final {
    return CreateMaybeMessage<Restore>(nullptr);
  }

  Restore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Restore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Restore& from);
  void MergeFrom(const Restore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Restore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Restore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kDepthFieldNumber = 1,
  };
  // repeated .MsgBlock blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::MsgBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgBlock >*
      mutable_blocks();
  private:
  const ::MsgBlock& _internal_blocks(int index) const;
  ::MsgBlock* _internal_add_blocks();
  public:
  const ::MsgBlock& blocks(int index) const;
  ::MsgBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgBlock >&
      blocks() const;

  // required int32 depth = 1;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Restore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class Prepare :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Prepare) */ {
 public:
  Prepare();
  virtual ~Prepare();

  Prepare(const Prepare& from);
  Prepare(Prepare&& from) noexcept
    : Prepare() {
    *this = ::std::move(from);
  }

  inline Prepare& operator=(const Prepare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare& operator=(Prepare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prepare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prepare* internal_default_instance() {
    return reinterpret_cast<const Prepare*>(
               &_Prepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Prepare& a, Prepare& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare* New() const final {
    return CreateMaybeMessage<Prepare>(nullptr);
  }

  Prepare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prepare& from);
  void MergeFrom(const Prepare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prepare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Prepare";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBNumFieldNumber = 1,
  };
  // required .Ballot b_num = 1;
  bool has_b_num() const;
  private:
  bool _internal_has_b_num() const;
  public:
  void clear_b_num();
  const ::Ballot& b_num() const;
  ::Ballot* release_b_num();
  ::Ballot* mutable_b_num();
  void set_allocated_b_num(::Ballot* b_num);
  private:
  const ::Ballot& _internal_b_num() const;
  ::Ballot* _internal_mutable_b_num();
  public:

  // @@protoc_insertion_point(class_scope:Prepare)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Ballot* b_num_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class Promise :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Promise) */ {
 public:
  Promise();
  virtual ~Promise();

  Promise(const Promise& from);
  Promise(Promise&& from) noexcept
    : Promise() {
    *this = ::std::move(from);
  }

  inline Promise& operator=(const Promise& from) {
    CopyFrom(from);
    return *this;
  }
  inline Promise& operator=(Promise&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Promise& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Promise* internal_default_instance() {
    return reinterpret_cast<const Promise*>(
               &_Promise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Promise& a, Promise& b) {
    a.Swap(&b);
  }
  inline void Swap(Promise* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Promise* New() const final {
    return CreateMaybeMessage<Promise>(nullptr);
  }

  Promise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Promise>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Promise& from);
  void MergeFrom(const Promise& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Promise* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Promise";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBNumFieldNumber = 1,
    kPBNumFieldNumber = 2,
  };
  // required .Ballot b_num = 1;
  bool has_b_num() const;
  private:
  bool _internal_has_b_num() const;
  public:
  void clear_b_num();
  const ::Ballot& b_num() const;
  ::Ballot* release_b_num();
  ::Ballot* mutable_b_num();
  void set_allocated_b_num(::Ballot* b_num);
  private:
  const ::Ballot& _internal_b_num() const;
  ::Ballot* _internal_mutable_b_num();
  public:

  // required .Ballot p_b_num = 2;
  bool has_p_b_num() const;
  private:
  bool _internal_has_p_b_num() const;
  public:
  void clear_p_b_num();
  const ::Ballot& p_b_num() const;
  ::Ballot* release_p_b_num();
  ::Ballot* mutable_p_b_num();
  void set_allocated_p_b_num(::Ballot* p_b_num);
  private:
  const ::Ballot& _internal_p_b_num() const;
  ::Ballot* _internal_mutable_p_b_num();
  public:

  // @@protoc_insertion_point(class_scope:Promise)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Ballot* b_num_;
  ::Ballot* p_b_num_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class Accept :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Accept) */ {
 public:
  Accept();
  virtual ~Accept();

  Accept(const Accept& from);
  Accept(Accept&& from) noexcept
    : Accept() {
    *this = ::std::move(from);
  }

  inline Accept& operator=(const Accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accept& operator=(Accept&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accept* internal_default_instance() {
    return reinterpret_cast<const Accept*>(
               &_Accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Accept& a, Accept& b) {
    a.Swap(&b);
  }
  inline void Swap(Accept* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accept* New() const final {
    return CreateMaybeMessage<Accept>(nullptr);
  }

  Accept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accept& from);
  void MergeFrom(const Accept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Accept";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBNumFieldNumber = 1,
    kBlockFieldNumber = 2,
  };
  // required .Ballot b_num = 1;
  bool has_b_num() const;
  private:
  bool _internal_has_b_num() const;
  public:
  void clear_b_num();
  const ::Ballot& b_num() const;
  ::Ballot* release_b_num();
  ::Ballot* mutable_b_num();
  void set_allocated_b_num(::Ballot* b_num);
  private:
  const ::Ballot& _internal_b_num() const;
  ::Ballot* _internal_mutable_b_num();
  public:

  // required .MsgBlock block = 2;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::MsgBlock& block() const;
  ::MsgBlock* release_block();
  ::MsgBlock* mutable_block();
  void set_allocated_block(::MsgBlock* block);
  private:
  const ::MsgBlock& _internal_block() const;
  ::MsgBlock* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Accept)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Ballot* b_num_;
  ::MsgBlock* block_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class Accepted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Accepted) */ {
 public:
  Accepted();
  virtual ~Accepted();

  Accepted(const Accepted& from);
  Accepted(Accepted&& from) noexcept
    : Accepted() {
    *this = ::std::move(from);
  }

  inline Accepted& operator=(const Accepted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accepted& operator=(Accepted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accepted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accepted* internal_default_instance() {
    return reinterpret_cast<const Accepted*>(
               &_Accepted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Accepted& a, Accepted& b) {
    a.Swap(&b);
  }
  inline void Swap(Accepted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accepted* New() const final {
    return CreateMaybeMessage<Accepted>(nullptr);
  }

  Accepted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accepted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accepted& from);
  void MergeFrom(const Accepted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accepted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Accepted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBNumFieldNumber = 1,
  };
  // required .Ballot b_num = 1;
  bool has_b_num() const;
  private:
  bool _internal_has_b_num() const;
  public:
  void clear_b_num();
  const ::Ballot& b_num() const;
  ::Ballot* release_b_num();
  ::Ballot* mutable_b_num();
  void set_allocated_b_num(::Ballot* b_num);
  private:
  const ::Ballot& _internal_b_num() const;
  ::Ballot* _internal_mutable_b_num();
  public:

  // @@protoc_insertion_point(class_scope:Accepted)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Ballot* b_num_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class Decide :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Decide) */ {
 public:
  Decide();
  virtual ~Decide();

  Decide(const Decide& from);
  Decide(Decide&& from) noexcept
    : Decide() {
    *this = ::std::move(from);
  }

  inline Decide& operator=(const Decide& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decide& operator=(Decide&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decide& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decide* internal_default_instance() {
    return reinterpret_cast<const Decide*>(
               &_Decide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Decide& a, Decide& b) {
    a.Swap(&b);
  }
  inline void Swap(Decide* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decide* New() const final {
    return CreateMaybeMessage<Decide>(nullptr);
  }

  Decide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decide>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decide& from);
  void MergeFrom(const Decide& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decide* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Decide";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBNumFieldNumber = 1,
    kBlockFieldNumber = 2,
  };
  // required .Ballot b_num = 1;
  bool has_b_num() const;
  private:
  bool _internal_has_b_num() const;
  public:
  void clear_b_num();
  const ::Ballot& b_num() const;
  ::Ballot* release_b_num();
  ::Ballot* mutable_b_num();
  void set_allocated_b_num(::Ballot* b_num);
  private:
  const ::Ballot& _internal_b_num() const;
  ::Ballot* _internal_mutable_b_num();
  public:

  // required .MsgBlock block = 2;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::MsgBlock& block() const;
  ::MsgBlock* release_block();
  ::MsgBlock* mutable_block();
  void set_allocated_block(::MsgBlock* block);
  private:
  const ::MsgBlock& _internal_block() const;
  ::MsgBlock* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Decide)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Ballot* b_num_;
  ::MsgBlock* block_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class WireMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WireMessage) */ {
 public:
  WireMessage();
  virtual ~WireMessage();

  WireMessage(const WireMessage& from);
  WireMessage(WireMessage&& from) noexcept
    : WireMessage() {
    *this = ::std::move(from);
  }

  inline WireMessage& operator=(const WireMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WireMessage& operator=(WireMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WireMessage& default_instance();

  enum OneOfMessageCase {
    kPrepare = 1,
    kPromise = 2,
    kAccept = 3,
    kAccepted = 4,
    kDecide = 5,
    kRestore = 6,
    ONEOFMESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WireMessage* internal_default_instance() {
    return reinterpret_cast<const WireMessage*>(
               &_WireMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WireMessage& a, WireMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WireMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WireMessage* New() const final {
    return CreateMaybeMessage<WireMessage>(nullptr);
  }

  WireMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WireMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WireMessage& from);
  void MergeFrom(const WireMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WireMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WireMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrepareFieldNumber = 1,
    kPromiseFieldNumber = 2,
    kAcceptFieldNumber = 3,
    kAcceptedFieldNumber = 4,
    kDecideFieldNumber = 5,
    kRestoreFieldNumber = 6,
  };
  // optional .Prepare prepare = 1;
  bool has_prepare() const;
  private:
  bool _internal_has_prepare() const;
  public:
  void clear_prepare();
  const ::Prepare& prepare() const;
  ::Prepare* release_prepare();
  ::Prepare* mutable_prepare();
  void set_allocated_prepare(::Prepare* prepare);
  private:
  const ::Prepare& _internal_prepare() const;
  ::Prepare* _internal_mutable_prepare();
  public:

  // optional .Promise promise = 2;
  bool has_promise() const;
  private:
  bool _internal_has_promise() const;
  public:
  void clear_promise();
  const ::Promise& promise() const;
  ::Promise* release_promise();
  ::Promise* mutable_promise();
  void set_allocated_promise(::Promise* promise);
  private:
  const ::Promise& _internal_promise() const;
  ::Promise* _internal_mutable_promise();
  public:

  // optional .Accept accept = 3;
  bool has_accept() const;
  private:
  bool _internal_has_accept() const;
  public:
  void clear_accept();
  const ::Accept& accept() const;
  ::Accept* release_accept();
  ::Accept* mutable_accept();
  void set_allocated_accept(::Accept* accept);
  private:
  const ::Accept& _internal_accept() const;
  ::Accept* _internal_mutable_accept();
  public:

  // optional .Accepted accepted = 4;
  bool has_accepted() const;
  private:
  bool _internal_has_accepted() const;
  public:
  void clear_accepted();
  const ::Accepted& accepted() const;
  ::Accepted* release_accepted();
  ::Accepted* mutable_accepted();
  void set_allocated_accepted(::Accepted* accepted);
  private:
  const ::Accepted& _internal_accepted() const;
  ::Accepted* _internal_mutable_accepted();
  public:

  // optional .Decide decide = 5;
  bool has_decide() const;
  private:
  bool _internal_has_decide() const;
  public:
  void clear_decide();
  const ::Decide& decide() const;
  ::Decide* release_decide();
  ::Decide* mutable_decide();
  void set_allocated_decide(::Decide* decide);
  private:
  const ::Decide& _internal_decide() const;
  ::Decide* _internal_mutable_decide();
  public:

  // optional .Restore restore = 6;
  bool has_restore() const;
  private:
  bool _internal_has_restore() const;
  public:
  void clear_restore();
  const ::Restore& restore() const;
  ::Restore* release_restore();
  ::Restore* mutable_restore();
  void set_allocated_restore(::Restore* restore);
  private:
  const ::Restore& _internal_restore() const;
  ::Restore* _internal_mutable_restore();
  public:

  void clear_oneOfMessage();
  OneOfMessageCase oneOfMessage_case() const;
  // @@protoc_insertion_point(class_scope:WireMessage)
 private:
  class _Internal;
  void set_has_prepare();
  void set_has_promise();
  void set_has_accept();
  void set_has_accepted();
  void set_has_decide();
  void set_has_restore();

  inline bool has_oneOfMessage() const;
  inline void clear_has_oneOfMessage();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union OneOfMessageUnion {
    OneOfMessageUnion() {}
    ::Prepare* prepare_;
    ::Promise* promise_;
    ::Accept* accept_;
    ::Accepted* accepted_;
    ::Decide* decide_;
    ::Restore* restore_;
  } oneOfMessage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ballot

// required int32 seq_n = 1;
inline bool Ballot::_internal_has_seq_n() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ballot::has_seq_n() const {
  return _internal_has_seq_n();
}
inline void Ballot::clear_seq_n() {
  seq_n_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ballot::_internal_seq_n() const {
  return seq_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ballot::seq_n() const {
  // @@protoc_insertion_point(field_get:Ballot.seq_n)
  return _internal_seq_n();
}
inline void Ballot::_internal_set_seq_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  seq_n_ = value;
}
inline void Ballot::set_seq_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq_n(value);
  // @@protoc_insertion_point(field_set:Ballot.seq_n)
}

// required int32 proc_id = 2;
inline bool Ballot::_internal_has_proc_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ballot::has_proc_id() const {
  return _internal_has_proc_id();
}
inline void Ballot::clear_proc_id() {
  proc_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ballot::_internal_proc_id() const {
  return proc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ballot::proc_id() const {
  // @@protoc_insertion_point(field_get:Ballot.proc_id)
  return _internal_proc_id();
}
inline void Ballot::_internal_set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  proc_id_ = value;
}
inline void Ballot::set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proc_id(value);
  // @@protoc_insertion_point(field_set:Ballot.proc_id)
}

// required int32 depth = 3;
inline bool Ballot::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ballot::has_depth() const {
  return _internal_has_depth();
}
inline void Ballot::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ballot::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ballot::depth() const {
  // @@protoc_insertion_point(field_get:Ballot.depth)
  return _internal_depth();
}
inline void Ballot::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  depth_ = value;
}
inline void Ballot::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:Ballot.depth)
}

// -------------------------------------------------------------------

// Txn

// required int32 sender = 1;
inline bool Txn::_internal_has_sender() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Txn::has_sender() const {
  return _internal_has_sender();
}
inline void Txn::clear_sender() {
  sender_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Txn::_internal_sender() const {
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Txn::sender() const {
  // @@protoc_insertion_point(field_get:Txn.sender)
  return _internal_sender();
}
inline void Txn::_internal_set_sender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sender_ = value;
}
inline void Txn::set_sender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:Txn.sender)
}

// required int32 receiver = 2;
inline bool Txn::_internal_has_receiver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Txn::has_receiver() const {
  return _internal_has_receiver();
}
inline void Txn::clear_receiver() {
  receiver_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Txn::_internal_receiver() const {
  return receiver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Txn::receiver() const {
  // @@protoc_insertion_point(field_get:Txn.receiver)
  return _internal_receiver();
}
inline void Txn::_internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_ = value;
}
inline void Txn::set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:Txn.receiver)
}

// required int32 amount = 3;
inline bool Txn::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Txn::has_amount() const {
  return _internal_has_amount();
}
inline void Txn::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Txn::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Txn::amount() const {
  // @@protoc_insertion_point(field_get:Txn.amount)
  return _internal_amount();
}
inline void Txn::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
}
inline void Txn::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Txn.amount)
}

// -------------------------------------------------------------------

// MsgBlock

// required string nonce = 1;
inline bool MsgBlock::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MsgBlock::has_nonce() const {
  return _internal_has_nonce();
}
inline void MsgBlock::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgBlock::nonce() const {
  // @@protoc_insertion_point(field_get:MsgBlock.nonce)
  return _internal_nonce();
}
inline void MsgBlock::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:MsgBlock.nonce)
}
inline std::string* MsgBlock::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:MsgBlock.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& MsgBlock::_internal_nonce() const {
  return nonce_.GetNoArena();
}
inline void MsgBlock::_internal_set_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgBlock::set_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MsgBlock.nonce)
}
inline void MsgBlock::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgBlock.nonce)
}
inline void MsgBlock::set_nonce(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgBlock.nonce)
}
inline std::string* MsgBlock::_internal_mutable_nonce() {
  _has_bits_[0] |= 0x00000001u;
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgBlock::release_nonce() {
  // @@protoc_insertion_point(field_release:MsgBlock.nonce)
  if (!_internal_has_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nonce_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgBlock::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:MsgBlock.nonce)
}

// required string hash = 2;
inline bool MsgBlock::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MsgBlock::has_hash() const {
  return _internal_has_hash();
}
inline void MsgBlock::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MsgBlock::hash() const {
  // @@protoc_insertion_point(field_get:MsgBlock.hash)
  return _internal_hash();
}
inline void MsgBlock::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:MsgBlock.hash)
}
inline std::string* MsgBlock::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:MsgBlock.hash)
  return _internal_mutable_hash();
}
inline const std::string& MsgBlock::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void MsgBlock::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgBlock::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MsgBlock.hash)
}
inline void MsgBlock::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgBlock.hash)
}
inline void MsgBlock::set_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgBlock.hash)
}
inline std::string* MsgBlock::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgBlock::release_hash() {
  // @@protoc_insertion_point(field_release:MsgBlock.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgBlock::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:MsgBlock.hash)
}

// repeated .Txn tranxs = 3;
inline int MsgBlock::_internal_tranxs_size() const {
  return tranxs_.size();
}
inline int MsgBlock::tranxs_size() const {
  return _internal_tranxs_size();
}
inline void MsgBlock::clear_tranxs() {
  tranxs_.Clear();
}
inline ::Txn* MsgBlock::mutable_tranxs(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBlock.tranxs)
  return tranxs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Txn >*
MsgBlock::mutable_tranxs() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlock.tranxs)
  return &tranxs_;
}
inline const ::Txn& MsgBlock::_internal_tranxs(int index) const {
  return tranxs_.Get(index);
}
inline const ::Txn& MsgBlock::tranxs(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlock.tranxs)
  return _internal_tranxs(index);
}
inline ::Txn* MsgBlock::_internal_add_tranxs() {
  return tranxs_.Add();
}
inline ::Txn* MsgBlock::add_tranxs() {
  // @@protoc_insertion_point(field_add:MsgBlock.tranxs)
  return _internal_add_tranxs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Txn >&
MsgBlock::tranxs() const {
  // @@protoc_insertion_point(field_list:MsgBlock.tranxs)
  return tranxs_;
}

// -------------------------------------------------------------------

// Restore

// required int32 depth = 1;
inline bool Restore::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Restore::has_depth() const {
  return _internal_has_depth();
}
inline void Restore::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Restore::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Restore::depth() const {
  // @@protoc_insertion_point(field_get:Restore.depth)
  return _internal_depth();
}
inline void Restore::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  depth_ = value;
}
inline void Restore::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:Restore.depth)
}

// repeated .MsgBlock blocks = 2;
inline int Restore::_internal_blocks_size() const {
  return blocks_.size();
}
inline int Restore::blocks_size() const {
  return _internal_blocks_size();
}
inline void Restore::clear_blocks() {
  blocks_.Clear();
}
inline ::MsgBlock* Restore::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:Restore.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgBlock >*
Restore::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:Restore.blocks)
  return &blocks_;
}
inline const ::MsgBlock& Restore::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::MsgBlock& Restore::blocks(int index) const {
  // @@protoc_insertion_point(field_get:Restore.blocks)
  return _internal_blocks(index);
}
inline ::MsgBlock* Restore::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::MsgBlock* Restore::add_blocks() {
  // @@protoc_insertion_point(field_add:Restore.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgBlock >&
Restore::blocks() const {
  // @@protoc_insertion_point(field_list:Restore.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// Prepare

// required .Ballot b_num = 1;
inline bool Prepare::_internal_has_b_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || b_num_ != nullptr);
  return value;
}
inline bool Prepare::has_b_num() const {
  return _internal_has_b_num();
}
inline void Prepare::clear_b_num() {
  if (b_num_ != nullptr) b_num_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Ballot& Prepare::_internal_b_num() const {
  const ::Ballot* p = b_num_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Ballot*>(
      &::_Ballot_default_instance_);
}
inline const ::Ballot& Prepare::b_num() const {
  // @@protoc_insertion_point(field_get:Prepare.b_num)
  return _internal_b_num();
}
inline ::Ballot* Prepare::release_b_num() {
  // @@protoc_insertion_point(field_release:Prepare.b_num)
  _has_bits_[0] &= ~0x00000001u;
  ::Ballot* temp = b_num_;
  b_num_ = nullptr;
  return temp;
}
inline ::Ballot* Prepare::_internal_mutable_b_num() {
  _has_bits_[0] |= 0x00000001u;
  if (b_num_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ballot>(GetArenaNoVirtual());
    b_num_ = p;
  }
  return b_num_;
}
inline ::Ballot* Prepare::mutable_b_num() {
  // @@protoc_insertion_point(field_mutable:Prepare.b_num)
  return _internal_mutable_b_num();
}
inline void Prepare::set_allocated_b_num(::Ballot* b_num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete b_num_;
  }
  if (b_num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      b_num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b_num, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_num_ = b_num;
  // @@protoc_insertion_point(field_set_allocated:Prepare.b_num)
}

// -------------------------------------------------------------------

// Promise

// required .Ballot b_num = 1;
inline bool Promise::_internal_has_b_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || b_num_ != nullptr);
  return value;
}
inline bool Promise::has_b_num() const {
  return _internal_has_b_num();
}
inline void Promise::clear_b_num() {
  if (b_num_ != nullptr) b_num_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Ballot& Promise::_internal_b_num() const {
  const ::Ballot* p = b_num_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Ballot*>(
      &::_Ballot_default_instance_);
}
inline const ::Ballot& Promise::b_num() const {
  // @@protoc_insertion_point(field_get:Promise.b_num)
  return _internal_b_num();
}
inline ::Ballot* Promise::release_b_num() {
  // @@protoc_insertion_point(field_release:Promise.b_num)
  _has_bits_[0] &= ~0x00000001u;
  ::Ballot* temp = b_num_;
  b_num_ = nullptr;
  return temp;
}
inline ::Ballot* Promise::_internal_mutable_b_num() {
  _has_bits_[0] |= 0x00000001u;
  if (b_num_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ballot>(GetArenaNoVirtual());
    b_num_ = p;
  }
  return b_num_;
}
inline ::Ballot* Promise::mutable_b_num() {
  // @@protoc_insertion_point(field_mutable:Promise.b_num)
  return _internal_mutable_b_num();
}
inline void Promise::set_allocated_b_num(::Ballot* b_num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete b_num_;
  }
  if (b_num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      b_num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b_num, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_num_ = b_num;
  // @@protoc_insertion_point(field_set_allocated:Promise.b_num)
}

// required .Ballot p_b_num = 2;
inline bool Promise::_internal_has_p_b_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || p_b_num_ != nullptr);
  return value;
}
inline bool Promise::has_p_b_num() const {
  return _internal_has_p_b_num();
}
inline void Promise::clear_p_b_num() {
  if (p_b_num_ != nullptr) p_b_num_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Ballot& Promise::_internal_p_b_num() const {
  const ::Ballot* p = p_b_num_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Ballot*>(
      &::_Ballot_default_instance_);
}
inline const ::Ballot& Promise::p_b_num() const {
  // @@protoc_insertion_point(field_get:Promise.p_b_num)
  return _internal_p_b_num();
}
inline ::Ballot* Promise::release_p_b_num() {
  // @@protoc_insertion_point(field_release:Promise.p_b_num)
  _has_bits_[0] &= ~0x00000002u;
  ::Ballot* temp = p_b_num_;
  p_b_num_ = nullptr;
  return temp;
}
inline ::Ballot* Promise::_internal_mutable_p_b_num() {
  _has_bits_[0] |= 0x00000002u;
  if (p_b_num_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ballot>(GetArenaNoVirtual());
    p_b_num_ = p;
  }
  return p_b_num_;
}
inline ::Ballot* Promise::mutable_p_b_num() {
  // @@protoc_insertion_point(field_mutable:Promise.p_b_num)
  return _internal_mutable_p_b_num();
}
inline void Promise::set_allocated_p_b_num(::Ballot* p_b_num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p_b_num_;
  }
  if (p_b_num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p_b_num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p_b_num, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p_b_num_ = p_b_num;
  // @@protoc_insertion_point(field_set_allocated:Promise.p_b_num)
}

// -------------------------------------------------------------------

// Accept

// required .Ballot b_num = 1;
inline bool Accept::_internal_has_b_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || b_num_ != nullptr);
  return value;
}
inline bool Accept::has_b_num() const {
  return _internal_has_b_num();
}
inline void Accept::clear_b_num() {
  if (b_num_ != nullptr) b_num_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Ballot& Accept::_internal_b_num() const {
  const ::Ballot* p = b_num_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Ballot*>(
      &::_Ballot_default_instance_);
}
inline const ::Ballot& Accept::b_num() const {
  // @@protoc_insertion_point(field_get:Accept.b_num)
  return _internal_b_num();
}
inline ::Ballot* Accept::release_b_num() {
  // @@protoc_insertion_point(field_release:Accept.b_num)
  _has_bits_[0] &= ~0x00000001u;
  ::Ballot* temp = b_num_;
  b_num_ = nullptr;
  return temp;
}
inline ::Ballot* Accept::_internal_mutable_b_num() {
  _has_bits_[0] |= 0x00000001u;
  if (b_num_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ballot>(GetArenaNoVirtual());
    b_num_ = p;
  }
  return b_num_;
}
inline ::Ballot* Accept::mutable_b_num() {
  // @@protoc_insertion_point(field_mutable:Accept.b_num)
  return _internal_mutable_b_num();
}
inline void Accept::set_allocated_b_num(::Ballot* b_num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete b_num_;
  }
  if (b_num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      b_num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b_num, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_num_ = b_num;
  // @@protoc_insertion_point(field_set_allocated:Accept.b_num)
}

// required .MsgBlock block = 2;
inline bool Accept::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool Accept::has_block() const {
  return _internal_has_block();
}
inline void Accept::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::MsgBlock& Accept::_internal_block() const {
  const ::MsgBlock* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MsgBlock*>(
      &::_MsgBlock_default_instance_);
}
inline const ::MsgBlock& Accept::block() const {
  // @@protoc_insertion_point(field_get:Accept.block)
  return _internal_block();
}
inline ::MsgBlock* Accept::release_block() {
  // @@protoc_insertion_point(field_release:Accept.block)
  _has_bits_[0] &= ~0x00000002u;
  ::MsgBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::MsgBlock* Accept::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000002u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::MsgBlock* Accept::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Accept.block)
  return _internal_mutable_block();
}
inline void Accept::set_allocated_block(::MsgBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Accept.block)
}

// -------------------------------------------------------------------

// Accepted

// required .Ballot b_num = 1;
inline bool Accepted::_internal_has_b_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || b_num_ != nullptr);
  return value;
}
inline bool Accepted::has_b_num() const {
  return _internal_has_b_num();
}
inline void Accepted::clear_b_num() {
  if (b_num_ != nullptr) b_num_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Ballot& Accepted::_internal_b_num() const {
  const ::Ballot* p = b_num_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Ballot*>(
      &::_Ballot_default_instance_);
}
inline const ::Ballot& Accepted::b_num() const {
  // @@protoc_insertion_point(field_get:Accepted.b_num)
  return _internal_b_num();
}
inline ::Ballot* Accepted::release_b_num() {
  // @@protoc_insertion_point(field_release:Accepted.b_num)
  _has_bits_[0] &= ~0x00000001u;
  ::Ballot* temp = b_num_;
  b_num_ = nullptr;
  return temp;
}
inline ::Ballot* Accepted::_internal_mutable_b_num() {
  _has_bits_[0] |= 0x00000001u;
  if (b_num_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ballot>(GetArenaNoVirtual());
    b_num_ = p;
  }
  return b_num_;
}
inline ::Ballot* Accepted::mutable_b_num() {
  // @@protoc_insertion_point(field_mutable:Accepted.b_num)
  return _internal_mutable_b_num();
}
inline void Accepted::set_allocated_b_num(::Ballot* b_num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete b_num_;
  }
  if (b_num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      b_num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b_num, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_num_ = b_num;
  // @@protoc_insertion_point(field_set_allocated:Accepted.b_num)
}

// -------------------------------------------------------------------

// Decide

// required .Ballot b_num = 1;
inline bool Decide::_internal_has_b_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || b_num_ != nullptr);
  return value;
}
inline bool Decide::has_b_num() const {
  return _internal_has_b_num();
}
inline void Decide::clear_b_num() {
  if (b_num_ != nullptr) b_num_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Ballot& Decide::_internal_b_num() const {
  const ::Ballot* p = b_num_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Ballot*>(
      &::_Ballot_default_instance_);
}
inline const ::Ballot& Decide::b_num() const {
  // @@protoc_insertion_point(field_get:Decide.b_num)
  return _internal_b_num();
}
inline ::Ballot* Decide::release_b_num() {
  // @@protoc_insertion_point(field_release:Decide.b_num)
  _has_bits_[0] &= ~0x00000001u;
  ::Ballot* temp = b_num_;
  b_num_ = nullptr;
  return temp;
}
inline ::Ballot* Decide::_internal_mutable_b_num() {
  _has_bits_[0] |= 0x00000001u;
  if (b_num_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ballot>(GetArenaNoVirtual());
    b_num_ = p;
  }
  return b_num_;
}
inline ::Ballot* Decide::mutable_b_num() {
  // @@protoc_insertion_point(field_mutable:Decide.b_num)
  return _internal_mutable_b_num();
}
inline void Decide::set_allocated_b_num(::Ballot* b_num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete b_num_;
  }
  if (b_num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      b_num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b_num, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_num_ = b_num;
  // @@protoc_insertion_point(field_set_allocated:Decide.b_num)
}

// required .MsgBlock block = 2;
inline bool Decide::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool Decide::has_block() const {
  return _internal_has_block();
}
inline void Decide::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::MsgBlock& Decide::_internal_block() const {
  const ::MsgBlock* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MsgBlock*>(
      &::_MsgBlock_default_instance_);
}
inline const ::MsgBlock& Decide::block() const {
  // @@protoc_insertion_point(field_get:Decide.block)
  return _internal_block();
}
inline ::MsgBlock* Decide::release_block() {
  // @@protoc_insertion_point(field_release:Decide.block)
  _has_bits_[0] &= ~0x00000002u;
  ::MsgBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::MsgBlock* Decide::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000002u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::MsgBlock* Decide::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Decide.block)
  return _internal_mutable_block();
}
inline void Decide::set_allocated_block(::MsgBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Decide.block)
}

// -------------------------------------------------------------------

// WireMessage

// optional .Prepare prepare = 1;
inline bool WireMessage::_internal_has_prepare() const {
  return oneOfMessage_case() == kPrepare;
}
inline bool WireMessage::has_prepare() const {
  return _internal_has_prepare();
}
inline void WireMessage::set_has_prepare() {
  _oneof_case_[0] = kPrepare;
}
inline void WireMessage::clear_prepare() {
  if (_internal_has_prepare()) {
    delete oneOfMessage_.prepare_;
    clear_has_oneOfMessage();
  }
}
inline ::Prepare* WireMessage::release_prepare() {
  // @@protoc_insertion_point(field_release:WireMessage.prepare)
  if (_internal_has_prepare()) {
    clear_has_oneOfMessage();
      ::Prepare* temp = oneOfMessage_.prepare_;
    oneOfMessage_.prepare_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Prepare& WireMessage::_internal_prepare() const {
  return _internal_has_prepare()
      ? *oneOfMessage_.prepare_
      : *reinterpret_cast< ::Prepare*>(&::_Prepare_default_instance_);
}
inline const ::Prepare& WireMessage::prepare() const {
  // @@protoc_insertion_point(field_get:WireMessage.prepare)
  return _internal_prepare();
}
inline ::Prepare* WireMessage::_internal_mutable_prepare() {
  if (!_internal_has_prepare()) {
    clear_oneOfMessage();
    set_has_prepare();
    oneOfMessage_.prepare_ = CreateMaybeMessage< ::Prepare >(
        GetArenaNoVirtual());
  }
  return oneOfMessage_.prepare_;
}
inline ::Prepare* WireMessage::mutable_prepare() {
  // @@protoc_insertion_point(field_mutable:WireMessage.prepare)
  return _internal_mutable_prepare();
}

// optional .Promise promise = 2;
inline bool WireMessage::_internal_has_promise() const {
  return oneOfMessage_case() == kPromise;
}
inline bool WireMessage::has_promise() const {
  return _internal_has_promise();
}
inline void WireMessage::set_has_promise() {
  _oneof_case_[0] = kPromise;
}
inline void WireMessage::clear_promise() {
  if (_internal_has_promise()) {
    delete oneOfMessage_.promise_;
    clear_has_oneOfMessage();
  }
}
inline ::Promise* WireMessage::release_promise() {
  // @@protoc_insertion_point(field_release:WireMessage.promise)
  if (_internal_has_promise()) {
    clear_has_oneOfMessage();
      ::Promise* temp = oneOfMessage_.promise_;
    oneOfMessage_.promise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Promise& WireMessage::_internal_promise() const {
  return _internal_has_promise()
      ? *oneOfMessage_.promise_
      : *reinterpret_cast< ::Promise*>(&::_Promise_default_instance_);
}
inline const ::Promise& WireMessage::promise() const {
  // @@protoc_insertion_point(field_get:WireMessage.promise)
  return _internal_promise();
}
inline ::Promise* WireMessage::_internal_mutable_promise() {
  if (!_internal_has_promise()) {
    clear_oneOfMessage();
    set_has_promise();
    oneOfMessage_.promise_ = CreateMaybeMessage< ::Promise >(
        GetArenaNoVirtual());
  }
  return oneOfMessage_.promise_;
}
inline ::Promise* WireMessage::mutable_promise() {
  // @@protoc_insertion_point(field_mutable:WireMessage.promise)
  return _internal_mutable_promise();
}

// optional .Accept accept = 3;
inline bool WireMessage::_internal_has_accept() const {
  return oneOfMessage_case() == kAccept;
}
inline bool WireMessage::has_accept() const {
  return _internal_has_accept();
}
inline void WireMessage::set_has_accept() {
  _oneof_case_[0] = kAccept;
}
inline void WireMessage::clear_accept() {
  if (_internal_has_accept()) {
    delete oneOfMessage_.accept_;
    clear_has_oneOfMessage();
  }
}
inline ::Accept* WireMessage::release_accept() {
  // @@protoc_insertion_point(field_release:WireMessage.accept)
  if (_internal_has_accept()) {
    clear_has_oneOfMessage();
      ::Accept* temp = oneOfMessage_.accept_;
    oneOfMessage_.accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Accept& WireMessage::_internal_accept() const {
  return _internal_has_accept()
      ? *oneOfMessage_.accept_
      : *reinterpret_cast< ::Accept*>(&::_Accept_default_instance_);
}
inline const ::Accept& WireMessage::accept() const {
  // @@protoc_insertion_point(field_get:WireMessage.accept)
  return _internal_accept();
}
inline ::Accept* WireMessage::_internal_mutable_accept() {
  if (!_internal_has_accept()) {
    clear_oneOfMessage();
    set_has_accept();
    oneOfMessage_.accept_ = CreateMaybeMessage< ::Accept >(
        GetArenaNoVirtual());
  }
  return oneOfMessage_.accept_;
}
inline ::Accept* WireMessage::mutable_accept() {
  // @@protoc_insertion_point(field_mutable:WireMessage.accept)
  return _internal_mutable_accept();
}

// optional .Accepted accepted = 4;
inline bool WireMessage::_internal_has_accepted() const {
  return oneOfMessage_case() == kAccepted;
}
inline bool WireMessage::has_accepted() const {
  return _internal_has_accepted();
}
inline void WireMessage::set_has_accepted() {
  _oneof_case_[0] = kAccepted;
}
inline void WireMessage::clear_accepted() {
  if (_internal_has_accepted()) {
    delete oneOfMessage_.accepted_;
    clear_has_oneOfMessage();
  }
}
inline ::Accepted* WireMessage::release_accepted() {
  // @@protoc_insertion_point(field_release:WireMessage.accepted)
  if (_internal_has_accepted()) {
    clear_has_oneOfMessage();
      ::Accepted* temp = oneOfMessage_.accepted_;
    oneOfMessage_.accepted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Accepted& WireMessage::_internal_accepted() const {
  return _internal_has_accepted()
      ? *oneOfMessage_.accepted_
      : *reinterpret_cast< ::Accepted*>(&::_Accepted_default_instance_);
}
inline const ::Accepted& WireMessage::accepted() const {
  // @@protoc_insertion_point(field_get:WireMessage.accepted)
  return _internal_accepted();
}
inline ::Accepted* WireMessage::_internal_mutable_accepted() {
  if (!_internal_has_accepted()) {
    clear_oneOfMessage();
    set_has_accepted();
    oneOfMessage_.accepted_ = CreateMaybeMessage< ::Accepted >(
        GetArenaNoVirtual());
  }
  return oneOfMessage_.accepted_;
}
inline ::Accepted* WireMessage::mutable_accepted() {
  // @@protoc_insertion_point(field_mutable:WireMessage.accepted)
  return _internal_mutable_accepted();
}

// optional .Decide decide = 5;
inline bool WireMessage::_internal_has_decide() const {
  return oneOfMessage_case() == kDecide;
}
inline bool WireMessage::has_decide() const {
  return _internal_has_decide();
}
inline void WireMessage::set_has_decide() {
  _oneof_case_[0] = kDecide;
}
inline void WireMessage::clear_decide() {
  if (_internal_has_decide()) {
    delete oneOfMessage_.decide_;
    clear_has_oneOfMessage();
  }
}
inline ::Decide* WireMessage::release_decide() {
  // @@protoc_insertion_point(field_release:WireMessage.decide)
  if (_internal_has_decide()) {
    clear_has_oneOfMessage();
      ::Decide* temp = oneOfMessage_.decide_;
    oneOfMessage_.decide_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Decide& WireMessage::_internal_decide() const {
  return _internal_has_decide()
      ? *oneOfMessage_.decide_
      : *reinterpret_cast< ::Decide*>(&::_Decide_default_instance_);
}
inline const ::Decide& WireMessage::decide() const {
  // @@protoc_insertion_point(field_get:WireMessage.decide)
  return _internal_decide();
}
inline ::Decide* WireMessage::_internal_mutable_decide() {
  if (!_internal_has_decide()) {
    clear_oneOfMessage();
    set_has_decide();
    oneOfMessage_.decide_ = CreateMaybeMessage< ::Decide >(
        GetArenaNoVirtual());
  }
  return oneOfMessage_.decide_;
}
inline ::Decide* WireMessage::mutable_decide() {
  // @@protoc_insertion_point(field_mutable:WireMessage.decide)
  return _internal_mutable_decide();
}

// optional .Restore restore = 6;
inline bool WireMessage::_internal_has_restore() const {
  return oneOfMessage_case() == kRestore;
}
inline bool WireMessage::has_restore() const {
  return _internal_has_restore();
}
inline void WireMessage::set_has_restore() {
  _oneof_case_[0] = kRestore;
}
inline void WireMessage::clear_restore() {
  if (_internal_has_restore()) {
    delete oneOfMessage_.restore_;
    clear_has_oneOfMessage();
  }
}
inline ::Restore* WireMessage::release_restore() {
  // @@protoc_insertion_point(field_release:WireMessage.restore)
  if (_internal_has_restore()) {
    clear_has_oneOfMessage();
      ::Restore* temp = oneOfMessage_.restore_;
    oneOfMessage_.restore_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Restore& WireMessage::_internal_restore() const {
  return _internal_has_restore()
      ? *oneOfMessage_.restore_
      : *reinterpret_cast< ::Restore*>(&::_Restore_default_instance_);
}
inline const ::Restore& WireMessage::restore() const {
  // @@protoc_insertion_point(field_get:WireMessage.restore)
  return _internal_restore();
}
inline ::Restore* WireMessage::_internal_mutable_restore() {
  if (!_internal_has_restore()) {
    clear_oneOfMessage();
    set_has_restore();
    oneOfMessage_.restore_ = CreateMaybeMessage< ::Restore >(
        GetArenaNoVirtual());
  }
  return oneOfMessage_.restore_;
}
inline ::Restore* WireMessage::mutable_restore() {
  // @@protoc_insertion_point(field_mutable:WireMessage.restore)
  return _internal_mutable_restore();
}

inline bool WireMessage::has_oneOfMessage() const {
  return oneOfMessage_case() != ONEOFMESSAGE_NOT_SET;
}
inline void WireMessage::clear_has_oneOfMessage() {
  _oneof_case_[0] = ONEOFMESSAGE_NOT_SET;
}
inline WireMessage::OneOfMessageCase WireMessage::oneOfMessage_case() const {
  return WireMessage::OneOfMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto
