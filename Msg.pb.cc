// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#include "Msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Accept_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Accepted_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ballot_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Decide_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBlock_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Prepare_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Promise_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Restore_Msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Txn_Msg_2eproto;
class BallotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ballot> _instance;
} _Ballot_default_instance_;
class TxnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Txn> _instance;
} _Txn_default_instance_;
class MsgBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBlock> _instance;
} _MsgBlock_default_instance_;
class RestoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Restore> _instance;
} _Restore_default_instance_;
class PrepareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prepare> _instance;
} _Prepare_default_instance_;
class PromiseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Promise> _instance;
} _Promise_default_instance_;
class AcceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accept> _instance;
} _Accept_default_instance_;
class AcceptedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accepted> _instance;
} _Accepted_default_instance_;
class DecideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decide> _instance;
} _Decide_default_instance_;
class WireMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WireMessage> _instance;
  const ::Prepare* prepare_;
  const ::Promise* promise_;
  const ::Accept* accept_;
  const ::Accepted* accepted_;
  const ::Decide* decide_;
  const ::Restore* restore_;
} _WireMessage_default_instance_;
static void InitDefaultsscc_info_Accept_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Accept_default_instance_;
    new (ptr) ::Accept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Accept::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Accept_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Accept_Msg_2eproto}, {
      &scc_info_Ballot_Msg_2eproto.base,
      &scc_info_MsgBlock_Msg_2eproto.base,}};

static void InitDefaultsscc_info_Accepted_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Accepted_default_instance_;
    new (ptr) ::Accepted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Accepted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Accepted_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Accepted_Msg_2eproto}, {
      &scc_info_Ballot_Msg_2eproto.base,
      &scc_info_MsgBlock_Msg_2eproto.base,}};

static void InitDefaultsscc_info_Ballot_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Ballot_default_instance_;
    new (ptr) ::Ballot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Ballot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ballot_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ballot_Msg_2eproto}, {}};

static void InitDefaultsscc_info_Decide_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Decide_default_instance_;
    new (ptr) ::Decide();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Decide::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Decide_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Decide_Msg_2eproto}, {
      &scc_info_Ballot_Msg_2eproto.base,
      &scc_info_MsgBlock_Msg_2eproto.base,}};

static void InitDefaultsscc_info_MsgBlock_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgBlock_default_instance_;
    new (ptr) ::MsgBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MsgBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBlock_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBlock_Msg_2eproto}, {
      &scc_info_Txn_Msg_2eproto.base,}};

static void InitDefaultsscc_info_Prepare_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Prepare_default_instance_;
    new (ptr) ::Prepare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Prepare::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Prepare_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Prepare_Msg_2eproto}, {
      &scc_info_Ballot_Msg_2eproto.base,}};

static void InitDefaultsscc_info_Promise_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Promise_default_instance_;
    new (ptr) ::Promise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Promise::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Promise_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Promise_Msg_2eproto}, {
      &scc_info_Ballot_Msg_2eproto.base,
      &scc_info_MsgBlock_Msg_2eproto.base,}};

static void InitDefaultsscc_info_Restore_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Restore_default_instance_;
    new (ptr) ::Restore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Restore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Restore_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Restore_Msg_2eproto}, {
      &scc_info_MsgBlock_Msg_2eproto.base,}};

static void InitDefaultsscc_info_Txn_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Txn_default_instance_;
    new (ptr) ::Txn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Txn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Txn_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Txn_Msg_2eproto}, {}};

static void InitDefaultsscc_info_WireMessage_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WireMessage_default_instance_;
    new (ptr) ::WireMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WireMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_WireMessage_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_WireMessage_Msg_2eproto}, {
      &scc_info_Prepare_Msg_2eproto.base,
      &scc_info_Promise_Msg_2eproto.base,
      &scc_info_Accept_Msg_2eproto.base,
      &scc_info_Accepted_Msg_2eproto.base,
      &scc_info_Decide_Msg_2eproto.base,
      &scc_info_Restore_Msg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Msg_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Msg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Msg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Ballot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Ballot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Ballot, seq_n_),
  PROTOBUF_FIELD_OFFSET(::Ballot, proc_id_),
  PROTOBUF_FIELD_OFFSET(::Ballot, depth_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Txn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Txn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Txn, sender_),
  PROTOBUF_FIELD_OFFSET(::Txn, receiver_),
  PROTOBUF_FIELD_OFFSET(::Txn, amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::MsgBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MsgBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgBlock, nonce_),
  PROTOBUF_FIELD_OFFSET(::MsgBlock, hash_),
  PROTOBUF_FIELD_OFFSET(::MsgBlock, tranxs_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Restore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Restore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Restore, depth_),
  PROTOBUF_FIELD_OFFSET(::Restore, blocks_),
  PROTOBUF_FIELD_OFFSET(::Restore, pid_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::Prepare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Prepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Prepare, b_num_),
  0,
  PROTOBUF_FIELD_OFFSET(::Promise, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Promise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Promise, b_num_),
  PROTOBUF_FIELD_OFFSET(::Promise, ab_num_),
  PROTOBUF_FIELD_OFFSET(::Promise, ablock_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Accept, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Accept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Accept, b_num_),
  PROTOBUF_FIELD_OFFSET(::Accept, block_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Accepted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Accepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Accepted, b_num_),
  PROTOBUF_FIELD_OFFSET(::Accepted, block_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Decide, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Decide, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Decide, b_num_),
  PROTOBUF_FIELD_OFFSET(::Decide, block_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::WireMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WireMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WireMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::WireMessageDefaultTypeInternal, prepare_),
  offsetof(::WireMessageDefaultTypeInternal, promise_),
  offsetof(::WireMessageDefaultTypeInternal, accept_),
  offsetof(::WireMessageDefaultTypeInternal, accepted_),
  offsetof(::WireMessageDefaultTypeInternal, decide_),
  offsetof(::WireMessageDefaultTypeInternal, restore_),
  PROTOBUF_FIELD_OFFSET(::WireMessage, oneOfMessage_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Ballot)},
  { 11, 19, sizeof(::Txn)},
  { 22, 30, sizeof(::MsgBlock)},
  { 33, 41, sizeof(::Restore)},
  { 44, 50, sizeof(::Prepare)},
  { 51, 59, sizeof(::Promise)},
  { 62, 69, sizeof(::Accept)},
  { 71, 78, sizeof(::Accepted)},
  { 80, 87, sizeof(::Decide)},
  { 89, 101, sizeof(::WireMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Ballot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Txn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Restore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Prepare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Promise_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Accept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Accepted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Decide_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WireMessage_default_instance_),
};

const char descriptor_table_protodef_Msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tMsg.proto\"7\n\006Ballot\022\r\n\005seq_n\030\001 \002(\005\022\017\n\007"
  "proc_id\030\002 \002(\005\022\r\n\005depth\030\003 \002(\005\"7\n\003Txn\022\016\n\006s"
  "ender\030\001 \002(\005\022\020\n\010receiver\030\002 \002(\005\022\016\n\006amount\030"
  "\003 \002(\005\"=\n\010MsgBlock\022\r\n\005nonce\030\001 \002(\t\022\014\n\004hash"
  "\030\002 \002(\t\022\024\n\006tranxs\030\003 \003(\0132\004.Txn\"@\n\007Restore\022"
  "\r\n\005depth\030\001 \002(\005\022\031\n\006blocks\030\002 \003(\0132\t.MsgBloc"
  "k\022\013\n\003pid\030\003 \002(\005\"!\n\007Prepare\022\026\n\005b_num\030\001 \002(\013"
  "2\007.Ballot\"U\n\007Promise\022\026\n\005b_num\030\001 \002(\0132\007.Ba"
  "llot\022\027\n\006ab_num\030\002 \002(\0132\007.Ballot\022\031\n\006ablock\030"
  "\003 \002(\0132\t.MsgBlock\":\n\006Accept\022\026\n\005b_num\030\001 \002("
  "\0132\007.Ballot\022\030\n\005block\030\002 \002(\0132\t.MsgBlock\"<\n\010"
  "Accepted\022\026\n\005b_num\030\001 \002(\0132\007.Ballot\022\030\n\005bloc"
  "k\030\002 \002(\0132\t.MsgBlock\":\n\006Decide\022\026\n\005b_num\030\001 "
  "\002(\0132\007.Ballot\022\030\n\005block\030\002 \002(\0132\t.MsgBlock\"\311"
  "\001\n\013WireMessage\022\033\n\007prepare\030\001 \001(\0132\010.Prepar"
  "eH\000\022\033\n\007promise\030\002 \001(\0132\010.PromiseH\000\022\031\n\006acce"
  "pt\030\003 \001(\0132\007.AcceptH\000\022\035\n\010accepted\030\004 \001(\0132\t."
  "AcceptedH\000\022\031\n\006decide\030\005 \001(\0132\007.DecideH\000\022\033\n"
  "\007restore\030\006 \001(\0132\010.RestoreH\000B\016\n\014oneOfMessa"
  "ge"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Msg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Msg_2eproto_sccs[10] = {
  &scc_info_Accept_Msg_2eproto.base,
  &scc_info_Accepted_Msg_2eproto.base,
  &scc_info_Ballot_Msg_2eproto.base,
  &scc_info_Decide_Msg_2eproto.base,
  &scc_info_MsgBlock_Msg_2eproto.base,
  &scc_info_Prepare_Msg_2eproto.base,
  &scc_info_Promise_Msg_2eproto.base,
  &scc_info_Restore_Msg_2eproto.base,
  &scc_info_Txn_Msg_2eproto.base,
  &scc_info_WireMessage_Msg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Msg_2eproto_once;
static bool descriptor_table_Msg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_2eproto = {
  &descriptor_table_Msg_2eproto_initialized, descriptor_table_protodef_Msg_2eproto, "Msg.proto", 762,
  &descriptor_table_Msg_2eproto_once, descriptor_table_Msg_2eproto_sccs, descriptor_table_Msg_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_Msg_2eproto::offsets,
  file_level_metadata_Msg_2eproto, 10, file_level_enum_descriptors_Msg_2eproto, file_level_service_descriptors_Msg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Msg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Msg_2eproto), true);

// ===================================================================

void Ballot::InitAsDefaultInstance() {
}
class Ballot::_Internal {
 public:
  using HasBits = decltype(std::declval<Ballot>()._has_bits_);
  static void set_has_seq_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Ballot::Ballot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ballot)
}
Ballot::Ballot(const Ballot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seq_n_, &from.seq_n_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&seq_n_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:Ballot)
}

void Ballot::SharedCtor() {
  ::memset(&seq_n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&seq_n_)) + sizeof(depth_));
}

Ballot::~Ballot() {
  // @@protoc_insertion_point(destructor:Ballot)
  SharedDtor();
}

void Ballot::SharedDtor() {
}

void Ballot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ballot& Ballot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ballot_Msg_2eproto.base);
  return *internal_default_instance();
}


void Ballot::Clear() {
// @@protoc_insertion_point(message_clear_start:Ballot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&seq_n_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_) -
        reinterpret_cast<char*>(&seq_n_)) + sizeof(depth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ballot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 seq_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seq_n(&has_bits);
          seq_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 proc_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_proc_id(&has_bits);
          proc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ballot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ballot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 seq_n = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seq_n(), target);
  }

  // required int32 proc_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_proc_id(), target);
  }

  // required int32 depth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ballot)
  return target;
}

size_t Ballot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Ballot)
  size_t total_size = 0;

  if (_internal_has_seq_n()) {
    // required int32 seq_n = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq_n());
  }

  if (_internal_has_proc_id()) {
    // required int32 proc_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proc_id());
  }

  if (_internal_has_depth()) {
    // required int32 depth = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  return total_size;
}
size_t Ballot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ballot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 seq_n = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq_n());

    // required int32 proc_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proc_id());

    // required int32 depth = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ballot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ballot)
  GOOGLE_DCHECK_NE(&from, this);
  const Ballot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ballot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ballot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ballot)
    MergeFrom(*source);
  }
}

void Ballot::MergeFrom(const Ballot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ballot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      seq_n_ = from.seq_n_;
    }
    if (cached_has_bits & 0x00000002u) {
      proc_id_ = from.proc_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ballot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ballot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ballot::CopyFrom(const Ballot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ballot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ballot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Ballot::InternalSwap(Ballot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seq_n_, other->seq_n_);
  swap(proc_id_, other->proc_id_);
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ballot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Txn::InitAsDefaultInstance() {
}
class Txn::_Internal {
 public:
  using HasBits = decltype(std::declval<Txn>()._has_bits_);
  static void set_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Txn::Txn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Txn)
}
Txn::Txn(const Txn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:Txn)
}

void Txn::SharedCtor() {
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(amount_));
}

Txn::~Txn() {
  // @@protoc_insertion_point(destructor:Txn)
  SharedDtor();
}

void Txn::SharedDtor() {
}

void Txn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Txn& Txn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Txn_Msg_2eproto.base);
  return *internal_default_instance();
}


void Txn::Clear() {
// @@protoc_insertion_point(message_clear_start:Txn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&sender_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Txn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sender(&has_bits);
          sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 receiver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_receiver(&has_bits);
          receiver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Txn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Txn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender(), target);
  }

  // required int32 receiver = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver(), target);
  }

  // required int32 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Txn)
  return target;
}

size_t Txn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Txn)
  size_t total_size = 0;

  if (_internal_has_sender()) {
    // required int32 sender = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender());
  }

  if (_internal_has_receiver()) {
    // required int32 receiver = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver());
  }

  if (_internal_has_amount()) {
    // required int32 amount = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_amount());
  }

  return total_size;
}
size_t Txn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Txn)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 sender = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender());

    // required int32 receiver = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver());

    // required int32 amount = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Txn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Txn)
  GOOGLE_DCHECK_NE(&from, this);
  const Txn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Txn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Txn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Txn)
    MergeFrom(*source);
  }
}

void Txn::MergeFrom(const Txn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Txn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sender_ = from.sender_;
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_ = from.receiver_;
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Txn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Txn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Txn::CopyFrom(const Txn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Txn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Txn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Txn::InternalSwap(Txn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sender_, other->sender_);
  swap(receiver_, other->receiver_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Txn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgBlock::InitAsDefaultInstance() {
}
class MsgBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgBlock>()._has_bits_);
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MsgBlock::MsgBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBlock)
}
MsgBlock::MsgBlock(const MsgBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tranxs_(from.tranxs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nonce()) {
    nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:MsgBlock)
}

void MsgBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBlock_Msg_2eproto.base);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgBlock::~MsgBlock() {
  // @@protoc_insertion_point(destructor:MsgBlock)
  SharedDtor();
}

void MsgBlock::SharedDtor() {
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBlock& MsgBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBlock_Msg_2eproto.base);
  return *internal_default_instance();
}


void MsgBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tranxs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      nonce_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MsgBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBlock.nonce");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBlock.hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Txn tranxs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tranxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nonce = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "MsgBlock.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // required string hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "MsgBlock.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // repeated .Txn tranxs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tranxs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tranxs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBlock)
  return target;
}

size_t MsgBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MsgBlock)
  size_t total_size = 0;

  if (_internal_has_nonce()) {
    // required string nonce = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  if (_internal_has_hash()) {
    // required string hash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  return total_size;
}
size_t MsgBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBlock)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string nonce = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());

    // required string hash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Txn tranxs = 3;
  total_size += 1UL * this->_internal_tranxs_size();
  for (const auto& msg : this->tranxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBlock)
    MergeFrom(*source);
  }
}

void MsgBlock::MergeFrom(const MsgBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tranxs_.MergeFrom(from.tranxs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
  }
}

void MsgBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlock::CopyFrom(const MsgBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tranxs_)) return false;
  return true;
}

void MsgBlock::InternalSwap(MsgBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tranxs_.InternalSwap(&other->tranxs_);
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Restore::InitAsDefaultInstance() {
}
class Restore::_Internal {
 public:
  using HasBits = decltype(std::declval<Restore>()._has_bits_);
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Restore::Restore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Restore)
}
Restore::Restore(const Restore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:Restore)
}

void Restore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Restore_Msg_2eproto.base);
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(pid_));
}

Restore::~Restore() {
  // @@protoc_insertion_point(destructor:Restore)
  SharedDtor();
}

void Restore::SharedDtor() {
}

void Restore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Restore& Restore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Restore_Msg_2eproto.base);
  return *internal_default_instance();
}


void Restore::Clear() {
// @@protoc_insertion_point(message_clear_start:Restore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_) -
        reinterpret_cast<char*>(&depth_)) + sizeof(pid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Restore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MsgBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Restore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Restore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 depth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_depth(), target);
  }

  // repeated .MsgBlock blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocks(i), target, stream);
  }

  // required int32 pid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Restore)
  return target;
}

size_t Restore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Restore)
  size_t total_size = 0;

  if (_internal_has_depth()) {
    // required int32 depth = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  if (_internal_has_pid()) {
    // required int32 pid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  return total_size;
}
size_t Restore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Restore)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 depth = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());

    // required int32 pid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgBlock blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Restore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Restore)
  GOOGLE_DCHECK_NE(&from, this);
  const Restore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Restore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Restore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Restore)
    MergeFrom(*source);
  }
}

void Restore::MergeFrom(const Restore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Restore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Restore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Restore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Restore::CopyFrom(const Restore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Restore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Restore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blocks_)) return false;
  return true;
}

void Restore::InternalSwap(Restore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blocks_.InternalSwap(&other->blocks_);
  swap(depth_, other->depth_);
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Restore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prepare::InitAsDefaultInstance() {
  ::_Prepare_default_instance_._instance.get_mutable()->b_num_ = const_cast< ::Ballot*>(
      ::Ballot::internal_default_instance());
}
class Prepare::_Internal {
 public:
  using HasBits = decltype(std::declval<Prepare>()._has_bits_);
  static const ::Ballot& b_num(const Prepare* msg);
  static void set_has_b_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Ballot&
Prepare::_Internal::b_num(const Prepare* msg) {
  return *msg->b_num_;
}
Prepare::Prepare()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Prepare)
}
Prepare::Prepare(const Prepare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_b_num()) {
    b_num_ = new ::Ballot(*from.b_num_);
  } else {
    b_num_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Prepare)
}

void Prepare::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prepare_Msg_2eproto.base);
  b_num_ = nullptr;
}

Prepare::~Prepare() {
  // @@protoc_insertion_point(destructor:Prepare)
  SharedDtor();
}

void Prepare::SharedDtor() {
  if (this != internal_default_instance()) delete b_num_;
}

void Prepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prepare& Prepare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prepare_Msg_2eproto.base);
  return *internal_default_instance();
}


void Prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(b_num_ != nullptr);
    b_num_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Prepare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Ballot b_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prepare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Ballot b_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b_num(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Prepare)
  return target;
}

size_t Prepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Prepare)
  size_t total_size = 0;

  // required .Ballot b_num = 1;
  if (_internal_has_b_num()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prepare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  const Prepare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prepare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Prepare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Prepare)
    MergeFrom(*source);
  }
}

void Prepare::MergeFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_b_num()) {
    _internal_mutable_b_num()->::Ballot::MergeFrom(from._internal_b_num());
  }
}

void Prepare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prepare::CopyFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_b_num()) {
    if (!b_num_->IsInitialized()) return false;
  }
  return true;
}

void Prepare::InternalSwap(Prepare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_num_, other->b_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prepare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Promise::InitAsDefaultInstance() {
  ::_Promise_default_instance_._instance.get_mutable()->b_num_ = const_cast< ::Ballot*>(
      ::Ballot::internal_default_instance());
  ::_Promise_default_instance_._instance.get_mutable()->ab_num_ = const_cast< ::Ballot*>(
      ::Ballot::internal_default_instance());
  ::_Promise_default_instance_._instance.get_mutable()->ablock_ = const_cast< ::MsgBlock*>(
      ::MsgBlock::internal_default_instance());
}
class Promise::_Internal {
 public:
  using HasBits = decltype(std::declval<Promise>()._has_bits_);
  static const ::Ballot& b_num(const Promise* msg);
  static void set_has_b_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Ballot& ab_num(const Promise* msg);
  static void set_has_ab_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MsgBlock& ablock(const Promise* msg);
  static void set_has_ablock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Ballot&
Promise::_Internal::b_num(const Promise* msg) {
  return *msg->b_num_;
}
const ::Ballot&
Promise::_Internal::ab_num(const Promise* msg) {
  return *msg->ab_num_;
}
const ::MsgBlock&
Promise::_Internal::ablock(const Promise* msg) {
  return *msg->ablock_;
}
Promise::Promise()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Promise)
}
Promise::Promise(const Promise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_b_num()) {
    b_num_ = new ::Ballot(*from.b_num_);
  } else {
    b_num_ = nullptr;
  }
  if (from._internal_has_ab_num()) {
    ab_num_ = new ::Ballot(*from.ab_num_);
  } else {
    ab_num_ = nullptr;
  }
  if (from._internal_has_ablock()) {
    ablock_ = new ::MsgBlock(*from.ablock_);
  } else {
    ablock_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Promise)
}

void Promise::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Promise_Msg_2eproto.base);
  ::memset(&b_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ablock_) -
      reinterpret_cast<char*>(&b_num_)) + sizeof(ablock_));
}

Promise::~Promise() {
  // @@protoc_insertion_point(destructor:Promise)
  SharedDtor();
}

void Promise::SharedDtor() {
  if (this != internal_default_instance()) delete b_num_;
  if (this != internal_default_instance()) delete ab_num_;
  if (this != internal_default_instance()) delete ablock_;
}

void Promise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Promise& Promise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Promise_Msg_2eproto.base);
  return *internal_default_instance();
}


void Promise::Clear() {
// @@protoc_insertion_point(message_clear_start:Promise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(b_num_ != nullptr);
      b_num_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ab_num_ != nullptr);
      ab_num_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ablock_ != nullptr);
      ablock_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Promise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Ballot b_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Ballot ab_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ab_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .MsgBlock ablock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ablock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Promise::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Promise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Ballot b_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b_num(this), target, stream);
  }

  // required .Ballot ab_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ab_num(this), target, stream);
  }

  // required .MsgBlock ablock = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ablock(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Promise)
  return target;
}

size_t Promise::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Promise)
  size_t total_size = 0;

  if (_internal_has_b_num()) {
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);
  }

  if (_internal_has_ab_num()) {
    // required .Ballot ab_num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ab_num_);
  }

  if (_internal_has_ablock()) {
    // required .MsgBlock ablock = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ablock_);
  }

  return total_size;
}
size_t Promise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Promise)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);

    // required .Ballot ab_num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ab_num_);

    // required .MsgBlock ablock = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ablock_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Promise::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Promise)
  GOOGLE_DCHECK_NE(&from, this);
  const Promise* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Promise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Promise)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Promise)
    MergeFrom(*source);
  }
}

void Promise::MergeFrom(const Promise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Promise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_b_num()->::Ballot::MergeFrom(from._internal_b_num());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ab_num()->::Ballot::MergeFrom(from._internal_ab_num());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ablock()->::MsgBlock::MergeFrom(from._internal_ablock());
    }
  }
}

void Promise::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Promise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Promise::CopyFrom(const Promise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Promise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Promise::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_b_num()) {
    if (!b_num_->IsInitialized()) return false;
  }
  if (_internal_has_ab_num()) {
    if (!ab_num_->IsInitialized()) return false;
  }
  if (_internal_has_ablock()) {
    if (!ablock_->IsInitialized()) return false;
  }
  return true;
}

void Promise::InternalSwap(Promise* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_num_, other->b_num_);
  swap(ab_num_, other->ab_num_);
  swap(ablock_, other->ablock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Promise::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Accept::InitAsDefaultInstance() {
  ::_Accept_default_instance_._instance.get_mutable()->b_num_ = const_cast< ::Ballot*>(
      ::Ballot::internal_default_instance());
  ::_Accept_default_instance_._instance.get_mutable()->block_ = const_cast< ::MsgBlock*>(
      ::MsgBlock::internal_default_instance());
}
class Accept::_Internal {
 public:
  using HasBits = decltype(std::declval<Accept>()._has_bits_);
  static const ::Ballot& b_num(const Accept* msg);
  static void set_has_b_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MsgBlock& block(const Accept* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Ballot&
Accept::_Internal::b_num(const Accept* msg) {
  return *msg->b_num_;
}
const ::MsgBlock&
Accept::_Internal::block(const Accept* msg) {
  return *msg->block_;
}
Accept::Accept()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Accept)
}
Accept::Accept(const Accept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_b_num()) {
    b_num_ = new ::Ballot(*from.b_num_);
  } else {
    b_num_ = nullptr;
  }
  if (from._internal_has_block()) {
    block_ = new ::MsgBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Accept)
}

void Accept::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Accept_Msg_2eproto.base);
  ::memset(&b_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&b_num_)) + sizeof(block_));
}

Accept::~Accept() {
  // @@protoc_insertion_point(destructor:Accept)
  SharedDtor();
}

void Accept::SharedDtor() {
  if (this != internal_default_instance()) delete b_num_;
  if (this != internal_default_instance()) delete block_;
}

void Accept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accept& Accept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accept_Msg_2eproto.base);
  return *internal_default_instance();
}


void Accept::Clear() {
// @@protoc_insertion_point(message_clear_start:Accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(b_num_ != nullptr);
      b_num_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(block_ != nullptr);
      block_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Accept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Ballot b_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .MsgBlock block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Ballot b_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b_num(this), target, stream);
  }

  // required .MsgBlock block = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Accept)
  return target;
}

size_t Accept::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Accept)
  size_t total_size = 0;

  if (_internal_has_b_num()) {
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);
  }

  if (_internal_has_block()) {
    // required .MsgBlock block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return total_size;
}
size_t Accept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Accept)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);

    // required .MsgBlock block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Accept)
  GOOGLE_DCHECK_NE(&from, this);
  const Accept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Accept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Accept)
    MergeFrom(*source);
  }
}

void Accept::MergeFrom(const Accept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Accept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_b_num()->::Ballot::MergeFrom(from._internal_b_num());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_block()->::MsgBlock::MergeFrom(from._internal_block());
    }
  }
}

void Accept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accept::CopyFrom(const Accept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_b_num()) {
    if (!b_num_->IsInitialized()) return false;
  }
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  return true;
}

void Accept::InternalSwap(Accept* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_num_, other->b_num_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Accepted::InitAsDefaultInstance() {
  ::_Accepted_default_instance_._instance.get_mutable()->b_num_ = const_cast< ::Ballot*>(
      ::Ballot::internal_default_instance());
  ::_Accepted_default_instance_._instance.get_mutable()->block_ = const_cast< ::MsgBlock*>(
      ::MsgBlock::internal_default_instance());
}
class Accepted::_Internal {
 public:
  using HasBits = decltype(std::declval<Accepted>()._has_bits_);
  static const ::Ballot& b_num(const Accepted* msg);
  static void set_has_b_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MsgBlock& block(const Accepted* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Ballot&
Accepted::_Internal::b_num(const Accepted* msg) {
  return *msg->b_num_;
}
const ::MsgBlock&
Accepted::_Internal::block(const Accepted* msg) {
  return *msg->block_;
}
Accepted::Accepted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Accepted)
}
Accepted::Accepted(const Accepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_b_num()) {
    b_num_ = new ::Ballot(*from.b_num_);
  } else {
    b_num_ = nullptr;
  }
  if (from._internal_has_block()) {
    block_ = new ::MsgBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Accepted)
}

void Accepted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Accepted_Msg_2eproto.base);
  ::memset(&b_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&b_num_)) + sizeof(block_));
}

Accepted::~Accepted() {
  // @@protoc_insertion_point(destructor:Accepted)
  SharedDtor();
}

void Accepted::SharedDtor() {
  if (this != internal_default_instance()) delete b_num_;
  if (this != internal_default_instance()) delete block_;
}

void Accepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accepted& Accepted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accepted_Msg_2eproto.base);
  return *internal_default_instance();
}


void Accepted::Clear() {
// @@protoc_insertion_point(message_clear_start:Accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(b_num_ != nullptr);
      b_num_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(block_ != nullptr);
      block_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Accepted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Ballot b_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .MsgBlock block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accepted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Ballot b_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b_num(this), target, stream);
  }

  // required .MsgBlock block = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Accepted)
  return target;
}

size_t Accepted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Accepted)
  size_t total_size = 0;

  if (_internal_has_b_num()) {
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);
  }

  if (_internal_has_block()) {
    // required .MsgBlock block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return total_size;
}
size_t Accepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Accepted)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);

    // required .MsgBlock block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accepted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Accepted)
  GOOGLE_DCHECK_NE(&from, this);
  const Accepted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accepted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Accepted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Accepted)
    MergeFrom(*source);
  }
}

void Accepted::MergeFrom(const Accepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Accepted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_b_num()->::Ballot::MergeFrom(from._internal_b_num());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_block()->::MsgBlock::MergeFrom(from._internal_block());
    }
  }
}

void Accepted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accepted::CopyFrom(const Accepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accepted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_b_num()) {
    if (!b_num_->IsInitialized()) return false;
  }
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  return true;
}

void Accepted::InternalSwap(Accepted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_num_, other->b_num_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accepted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decide::InitAsDefaultInstance() {
  ::_Decide_default_instance_._instance.get_mutable()->b_num_ = const_cast< ::Ballot*>(
      ::Ballot::internal_default_instance());
  ::_Decide_default_instance_._instance.get_mutable()->block_ = const_cast< ::MsgBlock*>(
      ::MsgBlock::internal_default_instance());
}
class Decide::_Internal {
 public:
  using HasBits = decltype(std::declval<Decide>()._has_bits_);
  static const ::Ballot& b_num(const Decide* msg);
  static void set_has_b_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MsgBlock& block(const Decide* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Ballot&
Decide::_Internal::b_num(const Decide* msg) {
  return *msg->b_num_;
}
const ::MsgBlock&
Decide::_Internal::block(const Decide* msg) {
  return *msg->block_;
}
Decide::Decide()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Decide)
}
Decide::Decide(const Decide& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_b_num()) {
    b_num_ = new ::Ballot(*from.b_num_);
  } else {
    b_num_ = nullptr;
  }
  if (from._internal_has_block()) {
    block_ = new ::MsgBlock(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Decide)
}

void Decide::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decide_Msg_2eproto.base);
  ::memset(&b_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&b_num_)) + sizeof(block_));
}

Decide::~Decide() {
  // @@protoc_insertion_point(destructor:Decide)
  SharedDtor();
}

void Decide::SharedDtor() {
  if (this != internal_default_instance()) delete b_num_;
  if (this != internal_default_instance()) delete block_;
}

void Decide::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decide& Decide::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decide_Msg_2eproto.base);
  return *internal_default_instance();
}


void Decide::Clear() {
// @@protoc_insertion_point(message_clear_start:Decide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(b_num_ != nullptr);
      b_num_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(block_ != nullptr);
      block_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Decide::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Ballot b_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .MsgBlock block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decide::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Decide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Ballot b_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b_num(this), target, stream);
  }

  // required .MsgBlock block = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Decide)
  return target;
}

size_t Decide::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Decide)
  size_t total_size = 0;

  if (_internal_has_b_num()) {
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);
  }

  if (_internal_has_block()) {
    // required .MsgBlock block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return total_size;
}
size_t Decide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Decide)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Ballot b_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_num_);

    // required .MsgBlock block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decide::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Decide)
  GOOGLE_DCHECK_NE(&from, this);
  const Decide* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decide>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Decide)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Decide)
    MergeFrom(*source);
  }
}

void Decide::MergeFrom(const Decide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Decide)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_b_num()->::Ballot::MergeFrom(from._internal_b_num());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_block()->::MsgBlock::MergeFrom(from._internal_block());
    }
  }
}

void Decide::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Decide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decide::CopyFrom(const Decide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Decide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_b_num()) {
    if (!b_num_->IsInitialized()) return false;
  }
  if (_internal_has_block()) {
    if (!block_->IsInitialized()) return false;
  }
  return true;
}

void Decide::InternalSwap(Decide* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_num_, other->b_num_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decide::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WireMessage::InitAsDefaultInstance() {
  ::_WireMessage_default_instance_.prepare_ = const_cast< ::Prepare*>(
      ::Prepare::internal_default_instance());
  ::_WireMessage_default_instance_.promise_ = const_cast< ::Promise*>(
      ::Promise::internal_default_instance());
  ::_WireMessage_default_instance_.accept_ = const_cast< ::Accept*>(
      ::Accept::internal_default_instance());
  ::_WireMessage_default_instance_.accepted_ = const_cast< ::Accepted*>(
      ::Accepted::internal_default_instance());
  ::_WireMessage_default_instance_.decide_ = const_cast< ::Decide*>(
      ::Decide::internal_default_instance());
  ::_WireMessage_default_instance_.restore_ = const_cast< ::Restore*>(
      ::Restore::internal_default_instance());
}
class WireMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<WireMessage>()._has_bits_);
  static const ::Prepare& prepare(const WireMessage* msg);
  static const ::Promise& promise(const WireMessage* msg);
  static const ::Accept& accept(const WireMessage* msg);
  static const ::Accepted& accepted(const WireMessage* msg);
  static const ::Decide& decide(const WireMessage* msg);
  static const ::Restore& restore(const WireMessage* msg);
};

const ::Prepare&
WireMessage::_Internal::prepare(const WireMessage* msg) {
  return *msg->oneOfMessage_.prepare_;
}
const ::Promise&
WireMessage::_Internal::promise(const WireMessage* msg) {
  return *msg->oneOfMessage_.promise_;
}
const ::Accept&
WireMessage::_Internal::accept(const WireMessage* msg) {
  return *msg->oneOfMessage_.accept_;
}
const ::Accepted&
WireMessage::_Internal::accepted(const WireMessage* msg) {
  return *msg->oneOfMessage_.accepted_;
}
const ::Decide&
WireMessage::_Internal::decide(const WireMessage* msg) {
  return *msg->oneOfMessage_.decide_;
}
const ::Restore&
WireMessage::_Internal::restore(const WireMessage* msg) {
  return *msg->oneOfMessage_.restore_;
}
void WireMessage::set_allocated_prepare(::Prepare* prepare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneOfMessage();
  if (prepare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prepare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare, submessage_arena);
    }
    set_has_prepare();
    oneOfMessage_.prepare_ = prepare;
  }
  // @@protoc_insertion_point(field_set_allocated:WireMessage.prepare)
}
void WireMessage::set_allocated_promise(::Promise* promise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneOfMessage();
  if (promise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      promise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, promise, submessage_arena);
    }
    set_has_promise();
    oneOfMessage_.promise_ = promise;
  }
  // @@protoc_insertion_point(field_set_allocated:WireMessage.promise)
}
void WireMessage::set_allocated_accept(::Accept* accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneOfMessage();
  if (accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accept, submessage_arena);
    }
    set_has_accept();
    oneOfMessage_.accept_ = accept;
  }
  // @@protoc_insertion_point(field_set_allocated:WireMessage.accept)
}
void WireMessage::set_allocated_accepted(::Accepted* accepted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneOfMessage();
  if (accepted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accepted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accepted, submessage_arena);
    }
    set_has_accepted();
    oneOfMessage_.accepted_ = accepted;
  }
  // @@protoc_insertion_point(field_set_allocated:WireMessage.accepted)
}
void WireMessage::set_allocated_decide(::Decide* decide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneOfMessage();
  if (decide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decide, submessage_arena);
    }
    set_has_decide();
    oneOfMessage_.decide_ = decide;
  }
  // @@protoc_insertion_point(field_set_allocated:WireMessage.decide)
}
void WireMessage::set_allocated_restore(::Restore* restore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneOfMessage();
  if (restore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      restore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restore, submessage_arena);
    }
    set_has_restore();
    oneOfMessage_.restore_ = restore;
  }
  // @@protoc_insertion_point(field_set_allocated:WireMessage.restore)
}
WireMessage::WireMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WireMessage)
}
WireMessage::WireMessage(const WireMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_oneOfMessage();
  switch (from.oneOfMessage_case()) {
    case kPrepare: {
      _internal_mutable_prepare()->::Prepare::MergeFrom(from._internal_prepare());
      break;
    }
    case kPromise: {
      _internal_mutable_promise()->::Promise::MergeFrom(from._internal_promise());
      break;
    }
    case kAccept: {
      _internal_mutable_accept()->::Accept::MergeFrom(from._internal_accept());
      break;
    }
    case kAccepted: {
      _internal_mutable_accepted()->::Accepted::MergeFrom(from._internal_accepted());
      break;
    }
    case kDecide: {
      _internal_mutable_decide()->::Decide::MergeFrom(from._internal_decide());
      break;
    }
    case kRestore: {
      _internal_mutable_restore()->::Restore::MergeFrom(from._internal_restore());
      break;
    }
    case ONEOFMESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WireMessage)
}

void WireMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WireMessage_Msg_2eproto.base);
  clear_has_oneOfMessage();
}

WireMessage::~WireMessage() {
  // @@protoc_insertion_point(destructor:WireMessage)
  SharedDtor();
}

void WireMessage::SharedDtor() {
  if (has_oneOfMessage()) {
    clear_oneOfMessage();
  }
}

void WireMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WireMessage& WireMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WireMessage_Msg_2eproto.base);
  return *internal_default_instance();
}


void WireMessage::clear_oneOfMessage() {
// @@protoc_insertion_point(one_of_clear_start:WireMessage)
  switch (oneOfMessage_case()) {
    case kPrepare: {
      delete oneOfMessage_.prepare_;
      break;
    }
    case kPromise: {
      delete oneOfMessage_.promise_;
      break;
    }
    case kAccept: {
      delete oneOfMessage_.accept_;
      break;
    }
    case kAccepted: {
      delete oneOfMessage_.accepted_;
      break;
    }
    case kDecide: {
      delete oneOfMessage_.decide_;
      break;
    }
    case kRestore: {
      delete oneOfMessage_.restore_;
      break;
    }
    case ONEOFMESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOFMESSAGE_NOT_SET;
}


void WireMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WireMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneOfMessage();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WireMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Prepare prepare = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Promise promise = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_promise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Accept accept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_accept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Accepted accepted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_accepted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Decide decide = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_decide(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Restore restore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_restore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WireMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WireMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (oneOfMessage_case()) {
    case kPrepare: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::prepare(this), target, stream);
      break;
    }
    case kPromise: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::promise(this), target, stream);
      break;
    }
    case kAccept: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::accept(this), target, stream);
      break;
    }
    case kAccepted: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::accepted(this), target, stream);
      break;
    }
    case kDecide: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::decide(this), target, stream);
      break;
    }
    case kRestore: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::restore(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WireMessage)
  return target;
}

size_t WireMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WireMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneOfMessage_case()) {
    // optional .Prepare prepare = 1;
    case kPrepare: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneOfMessage_.prepare_);
      break;
    }
    // optional .Promise promise = 2;
    case kPromise: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneOfMessage_.promise_);
      break;
    }
    // optional .Accept accept = 3;
    case kAccept: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneOfMessage_.accept_);
      break;
    }
    // optional .Accepted accepted = 4;
    case kAccepted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneOfMessage_.accepted_);
      break;
    }
    // optional .Decide decide = 5;
    case kDecide: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneOfMessage_.decide_);
      break;
    }
    // optional .Restore restore = 6;
    case kRestore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneOfMessage_.restore_);
      break;
    }
    case ONEOFMESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WireMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WireMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WireMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WireMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WireMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WireMessage)
    MergeFrom(*source);
  }
}

void WireMessage::MergeFrom(const WireMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WireMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneOfMessage_case()) {
    case kPrepare: {
      _internal_mutable_prepare()->::Prepare::MergeFrom(from._internal_prepare());
      break;
    }
    case kPromise: {
      _internal_mutable_promise()->::Promise::MergeFrom(from._internal_promise());
      break;
    }
    case kAccept: {
      _internal_mutable_accept()->::Accept::MergeFrom(from._internal_accept());
      break;
    }
    case kAccepted: {
      _internal_mutable_accepted()->::Accepted::MergeFrom(from._internal_accepted());
      break;
    }
    case kDecide: {
      _internal_mutable_decide()->::Decide::MergeFrom(from._internal_decide());
      break;
    }
    case kRestore: {
      _internal_mutable_restore()->::Restore::MergeFrom(from._internal_restore());
      break;
    }
    case ONEOFMESSAGE_NOT_SET: {
      break;
    }
  }
}

void WireMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WireMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WireMessage::CopyFrom(const WireMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WireMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WireMessage::IsInitialized() const {
  switch (oneOfMessage_case()) {
    case kPrepare: {
      if (has_prepare()) {
        if (!this->prepare().IsInitialized()) return false;
      }
      break;
    }
    case kPromise: {
      if (has_promise()) {
        if (!this->promise().IsInitialized()) return false;
      }
      break;
    }
    case kAccept: {
      if (has_accept()) {
        if (!this->accept().IsInitialized()) return false;
      }
      break;
    }
    case kAccepted: {
      if (has_accepted()) {
        if (!this->accepted().IsInitialized()) return false;
      }
      break;
    }
    case kDecide: {
      if (has_decide()) {
        if (!this->decide().IsInitialized()) return false;
      }
      break;
    }
    case kRestore: {
      if (has_restore()) {
        if (!this->restore().IsInitialized()) return false;
      }
      break;
    }
    case ONEOFMESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void WireMessage::InternalSwap(WireMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(oneOfMessage_, other->oneOfMessage_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WireMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Ballot* Arena::CreateMaybeMessage< ::Ballot >(Arena* arena) {
  return Arena::CreateInternal< ::Ballot >(arena);
}
template<> PROTOBUF_NOINLINE ::Txn* Arena::CreateMaybeMessage< ::Txn >(Arena* arena) {
  return Arena::CreateInternal< ::Txn >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgBlock* Arena::CreateMaybeMessage< ::MsgBlock >(Arena* arena) {
  return Arena::CreateInternal< ::MsgBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::Restore* Arena::CreateMaybeMessage< ::Restore >(Arena* arena) {
  return Arena::CreateInternal< ::Restore >(arena);
}
template<> PROTOBUF_NOINLINE ::Prepare* Arena::CreateMaybeMessage< ::Prepare >(Arena* arena) {
  return Arena::CreateInternal< ::Prepare >(arena);
}
template<> PROTOBUF_NOINLINE ::Promise* Arena::CreateMaybeMessage< ::Promise >(Arena* arena) {
  return Arena::CreateInternal< ::Promise >(arena);
}
template<> PROTOBUF_NOINLINE ::Accept* Arena::CreateMaybeMessage< ::Accept >(Arena* arena) {
  return Arena::CreateInternal< ::Accept >(arena);
}
template<> PROTOBUF_NOINLINE ::Accepted* Arena::CreateMaybeMessage< ::Accepted >(Arena* arena) {
  return Arena::CreateInternal< ::Accepted >(arena);
}
template<> PROTOBUF_NOINLINE ::Decide* Arena::CreateMaybeMessage< ::Decide >(Arena* arena) {
  return Arena::CreateInternal< ::Decide >(arena);
}
template<> PROTOBUF_NOINLINE ::WireMessage* Arena::CreateMaybeMessage< ::WireMessage >(Arena* arena) {
  return Arena::CreateInternal< ::WireMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
